{"ast":null,"code":"import io from \"socket.io-client\";\nimport store from \"../redux/store\";\nimport api from \"../config/api\";\nimport { DIALOGS_ADD_MESSAGE, DIALOGS_READ_MESSAGES, USER_SET_TARIFF, USER_UNSET_TARIFF, DIALOGS_SET_TYPER, DIALOGSORDER_SET_TYPER, DIALOGSORDER_ADD_MESSAGE, DIALOGSORDER_READ_MESSAGES, DIALOGSORDER_ADD, DIALOGS_ADD, ARTICLE_TAKING_DELETE_FROM_STATUS, ARTICLES_MY_CREATE, ARTICLES_MY_CREATE_COUNT, ARTICLES_MY_UPDATE, ARTICLE_TAKING_REVIEW_CREATE, ARTICLE_TAKING_REVIEW_UPDATE, ARTICLE_MY_REVIEW_CREATE, ARTICLE_MY_REVIEW_UPDATE, ARTICLES_TAKING_CREATE, ARTICLES_TAKING_CREATE_COUNT, ARTICLES_MY_DELETE_EXECUTOR, ARTICLES_MY_SET_EXECUTOR, ARTICLE_SET_ME_REQUEST, ARTICLE_UPDATE_ME_REQUEST, ARTICLE_REMOVE_ME_REQUEST, ARTICLES_TAKING_DELETE_EXECUTOR, ARTICLES_TAKING_SET_EXECUTOR, ARTICLE_MY_SET_DELIVERED, ARTICLE_TAKING_SET_DELIVERED, REVIEWS_ME_CREATE, REVIEWS_MY_CREATE, REVIEWS_ME_UPDATE, REVIEWS_MY_UPDATE //NOTIGICATION\n, NOTIFICATIONS_ALL_SET_NO_READ, NOTIFICATIONS_OFFERS_ADD, NOTIFICATIONS_OFFERS_READ, NOTIFICATIONS_OFFERS_SET_NO_READ, NOTIFICATIONS_ORDERS_ADD, NOTIFICATIONS_ORDERS_READ, NOTIFICATIONS_ORDERS_SET_NO_READ, NOTIFICATIONS_SYSTEM_ADD, NOTIFICATIONS_SYSTEM_READ, NOTIFICATIONS_SYSTEM_SET_NO_READ, NOTIFICATIONS_TARRIFS_ADD, NOTIFICATIONS_TARRIFS_READ, NOTIFICATIONS_TARRIFS_SET_NO_READ, NOTIFICATIONS_ALL_READ, NOTIFICATIONS_ALL_ADD, NOTIFICATIONS_NOREAD_ADD, NOTIFICATIONS_READ_ALL, ARTICLE_MY_UPDATE_STATUS, ARTICLE_TAKING_UPDATE_STATUS, DIALOGSALL_ADD_MESSAGE, DIALOGSALL_ADD, GEOARTICLE_SET_LOCATION, GEOARTICLES_ADD, GEOARTICLES_DELETE, USER_SET_BAN, USER_SET_CANCEL_BAN, USER_SET_MODERATION_SUCCESS, USER_SET_MODERATION_FAIL } from \"../redux/constants\";\nimport { playNewMessage, playBeep } from \"./SoundController\";\nlet socket = null;\nexport default {\n  init: apiToken => {\n    socket = io(api.urlApi, {\n      transports: [\"websocket\", \"polling\", \"flashsocket\"]\n    });\n    socket.on(\"connect\", () => {\n      socket.emit(\"auth\", apiToken);\n    }); //DIALOG\n\n    socket.on(\"typingDialog\", (userId, isOrder) => {\n      let orderId;\n\n      if (isOrder) {\n        if (orderId = store.getState().dialogs.dialogsOrder.dialogs.find(x => x.user._id === userId)) {\n          store.dispatch({\n            type: DIALOGSORDER_SET_TYPER,\n            payload: {\n              orderId: orderId._id,\n              typing: true\n            }\n          });\n          setTimeout(() => {\n            store.dispatch({\n              type: DIALOGSORDER_SET_TYPER,\n              payload: {\n                orderId: orderId._id,\n                typing: false\n              }\n            });\n          }, 2500);\n        }\n      } else {\n        if (orderId = store.getState().dialogs.dialogsUser.dialogs.find(x => x.user._id === userId)) {\n          store.dispatch({\n            type: DIALOGS_SET_TYPER,\n            payload: {\n              orderId: orderId._id,\n              typing: true\n            }\n          });\n          setTimeout(() => {\n            store.dispatch({\n              type: DIALOGS_SET_TYPER,\n              payload: {\n                orderId: orderId._id,\n                typing: false\n              }\n            });\n          }, 2500);\n        }\n      }\n    });\n    socket.on(\"setBan\", ({\n      tariff,\n      expiriesTariffAt\n    }) => {\n      store.dispatch({\n        type: USER_SET_BAN\n      });\n    });\n    socket.on(\"cancelBan\", ({\n      tariff,\n      expiriesTariffAt\n    }) => {\n      store.dispatch({\n        type: USER_SET_CANCEL_BAN,\n        payload: {\n          tariff,\n          expiriesTariffAt\n        }\n      });\n    });\n    socket.on(\"modarationSuccess\", ({}) => {\n      store.dispatch({\n        type: USER_SET_MODERATION_SUCCESS,\n        payload: {}\n      });\n    });\n    socket.on(\"modarationFail\", ({}) => {\n      store.dispatch({\n        type: USER_SET_MODERATION_FAIL,\n        payload: {}\n      });\n    });\n    socket.on(\"setTariff\", ({\n      tariff,\n      expiriesTariffAt\n    }) => {\n      if (store.getState().user.tariff) tariff = store.getState().user.tariff;\n      store.dispatch({\n        type: USER_SET_TARIFF,\n        payload: {\n          tariff,\n          expiriesTariffAt\n        }\n      });\n    });\n    socket.on(\"dontTariff\", ({\n      tariff,\n      expiriesTariffAt\n    }) => {\n      store.dispatch({\n        type: USER_UNSET_TARIFF\n      });\n    });\n    socket.on(\"sendMessageDialog\", ({\n      message,\n      otherId,\n      orderId,\n      countNoread,\n      isMy\n    }) => {\n      let dialogs = orderId ? store.getState().dialogs.dialogsOrder : store.getState().dialogs.dialogsUser;\n      if (!dialogs.isGetted) dialogs = store.getState().dialogs.dialogsALL;\n\n      if (dialogs.dialogs.find(x => x._id === message.dialogId)) {\n        store.dispatch({\n          type: orderId ? DIALOGSORDER_SET_TYPER : DIALOGS_SET_TYPER,\n          payload: {\n            userId: message.user._id,\n            typing: false\n          }\n        });\n        let noReadCount = false;\n\n        if (!isMy && countNoread === 1) {\n          noReadCount = true;\n        }\n\n        store.dispatch({\n          type: orderId ? DIALOGSORDER_ADD_MESSAGE : DIALOGS_ADD_MESSAGE,\n          payload: {\n            message,\n            dialogId: message.dialogId,\n            noRead: message.user._id !== store.getState().user._id,\n            noReadCount\n          }\n        });\n      } else {\n        fetch(`${api.urlApi}/api/user/get`, {\n          method: \"post\",\n          headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${apiToken}`\n          },\n          body: JSON.stringify({\n            userId: otherId\n          })\n        }).then(response => response.json()).then(({\n          user\n        }) => {\n          let dialog = {\n            lastMessage: message,\n            _id: message.dialogId,\n            users: [store.getState().user, user],\n            user: user,\n            orderId,\n            isGetted: false,\n            canLoad: true,\n            typing: false,\n            noRead: countNoread,\n            messages: []\n          };\n          store.dispatch({\n            type: orderId ? DIALOGSORDER_ADD : DIALOGS_ADD,\n            payload: {\n              dialog,\n              isAddCount: !isMy && countNoread\n            }\n          });\n          let noReadCount = false;\n\n          if (!isMy && countNoread === 1) {\n            noReadCount = true;\n          }\n\n          if (store.getState().dialogs.dialogsALL.dialogs.find(x => x._id === message.dialogId)) {\n            store.dispatch({\n              type: DIALOGSALL_ADD_MESSAGE,\n              payload: {\n                message,\n                dialogId: message.dialogId,\n                noRead: message.user._id !== store.getState().user._id,\n                noReadCount\n              }\n            });\n          } else store.dispatch({\n            type: DIALOGSALL_ADD,\n            payload: {\n              dialog,\n              isAddCount: noReadCount\n            }\n          });\n        });\n      }\n\n      playNewMessage();\n    });\n    socket.on(\"readMessagesDialog\", ({\n      dialogId,\n      userId,\n      isOrder\n    }) => {\n      if (isOrder) store.dispatch({\n        type: DIALOGSORDER_READ_MESSAGES,\n        payload: {\n          dialogId,\n          userId,\n          noRead: userId !== store.getState().user._id,\n          noReadCount: userId !== store.getState().user._id\n        }\n      });else store.dispatch({\n        type: DIALOGS_READ_MESSAGES,\n        payload: {\n          dialogId,\n          userId,\n          noRead: userId !== store.getState().user._id,\n          noReadCount: userId !== store.getState().user._id\n        }\n      });\n    });\n    /*DIALOG*/\n\n    /*ARTICLES SOKETS*/\n\n    socket.on(\"createMyArticle\", ({\n      status,\n      article\n    }) => {\n      let objStatus = store.getState().myarticles.my[status - 1];\n\n      if (objStatus.isGetted) {\n        store.dispatch({\n          type: ARTICLES_MY_CREATE,\n          payload: {\n            status,\n            article\n          }\n        });\n      } else {\n        store.dispatch({\n          type: ARTICLES_MY_CREATE_COUNT,\n          payload: {\n            status,\n            article\n          }\n        });\n      }\n    });\n    socket.on(\"createTakingArticle\", ({\n      status,\n      article\n    }) => {\n      let objStatus = store.getState().myarticles.taking[status - 2];\n\n      if (objStatus.isGetted) {\n        store.dispatch({\n          type: ARTICLES_TAKING_CREATE,\n          payload: {\n            status,\n            article\n          }\n        });\n      } else {\n        store.dispatch({\n          type: ARTICLES_TAKING_CREATE_COUNT,\n          payload: {\n            status,\n            article\n          }\n        });\n      }\n    });\n    socket.on(\"editMyArticle\", ({\n      status,\n      article\n    }) => {\n      store.dispatch({\n        type: ARTICLES_MY_UPDATE,\n        payload: {\n          status: status,\n          article\n        }\n      });\n    });\n    socket.on(\"deleteTaking\", ({\n      lastStatus,\n      articleID\n    }) => {\n      store.dispatch({\n        type: ARTICLE_TAKING_DELETE_FROM_STATUS,\n        payload: {\n          lastStatus,\n          articleId: articleID\n        }\n      });\n    });\n    socket.on(\"updateStatusMyArticle\", ({\n      lastStatus,\n      article,\n      isTaking\n    }) => {\n      if (isTaking) {\n        store.dispatch({\n          type: ARTICLE_TAKING_UPDATE_STATUS,\n          payload: {\n            lastStatus,\n            article\n          }\n        });\n      } else {\n        store.dispatch({\n          type: ARTICLE_MY_UPDATE_STATUS,\n          payload: {\n            lastStatus,\n            article\n          }\n        });\n      } //       GEOARTICLES_ADD\n      // GEOARTICLES_DELETE\n\n\n      if (store.getState().geoarticles.isGetted) {\n        if (lastStatus === 3 && article.status === 4) store.dispatch({\n          type: GEOARTICLES_ADD,\n          payload: {\n            article\n          }\n        });\n        if (lastStatus === 4) store.dispatch({\n          type: GEOARTICLES_DELETE,\n          payload: {\n            articleId: article._id\n          }\n        });\n      }\n    });\n    socket.on(\"setLocation\", ({\n      articleId,\n      location\n    }) => {\n      if (store.getState().geoarticles.isGetted) store.dispatch({\n        type: GEOARTICLE_SET_LOCATION,\n        payload: {\n          articleId,\n          location\n        }\n      });\n    });\n    socket.on(\"createArticleReview\", ({\n      articleID,\n      articleStatus,\n      newReview,\n      isTaking\n    }) => {\n      if (isTaking) {\n        store.dispatch({\n          type: ARTICLE_TAKING_REVIEW_CREATE,\n          payload: {\n            article: {\n              _id: articleID,\n              status: articleStatus\n            },\n            newReview\n          }\n        });\n      } else store.dispatch({\n        type: ARTICLE_MY_REVIEW_CREATE,\n        payload: {\n          article: {\n            _id: articleID,\n            status: articleStatus\n          },\n          newReview\n        }\n      });\n\n      if (newReview.user._id === store.getState().user._id) {\n        store.dispatch({\n          type: REVIEWS_ME_CREATE,\n          payload: {\n            review: newReview\n          }\n        });\n      }\n\n      if (newReview.author._id === store.getState().user._id) {\n        store.dispatch({\n          type: REVIEWS_MY_CREATE,\n          payload: {\n            review: newReview\n          }\n        });\n      }\n    });\n    socket.on(\"deleteExecutor\", ({\n      article,\n      executor,\n      lastStatus,\n      isTaking\n    }) => {\n      if (!isTaking) {\n        if (!article.executors.length && article.status === 2 && lastStatus !== 2) {\n          store.dispatch({\n            type: ARTICLE_MY_UPDATE_STATUS,\n            payload: {\n              lastStatus,\n              article\n            }\n          });\n        }\n\n        store.dispatch({\n          type: ARTICLES_MY_DELETE_EXECUTOR,\n          payload: {\n            article,\n            executor\n          }\n        });\n      } else {\n        store.dispatch({\n          type: ARTICLES_TAKING_DELETE_EXECUTOR,\n          payload: {\n            article,\n            executor\n          }\n        });\n      }\n    });\n    socket.on(\"setExecutor\", ({\n      article,\n      executor,\n      lastStatus,\n      isTaking\n    }) => {\n      if (!isTaking) {\n        if (article.type === \"order\") {\n          store.dispatch({\n            type: ARTICLE_MY_UPDATE_STATUS,\n            payload: {\n              lastStatus,\n              article\n            }\n          });\n        }\n\n        store.dispatch({\n          type: ARTICLES_MY_SET_EXECUTOR,\n          payload: {\n            article,\n            executor\n          }\n        });\n      } else store.dispatch({\n        type: ARTICLES_TAKING_SET_EXECUTOR,\n        payload: {\n          article,\n          executor\n        }\n      });\n    });\n    socket.on(\"createRequest\", ({\n      article,\n      request\n    }) => {\n      store.dispatch({\n        type: ARTICLE_SET_ME_REQUEST,\n        payload: {\n          article,\n          request\n        }\n      });\n    });\n    socket.on(\"deleteRequest\", ({\n      article,\n      requestId\n    }) => {\n      store.dispatch({\n        type: ARTICLE_REMOVE_ME_REQUEST,\n        payload: {\n          article,\n          requestId\n        }\n      });\n    });\n    socket.on(\"updateRequest\", ({\n      article,\n      request\n    }) => {\n      store.dispatch({\n        type: ARTICLE_UPDATE_ME_REQUEST,\n        payload: {\n          article,\n          request\n        }\n      });\n    });\n    socket.on(\"setDelivered\", ({\n      article,\n      user\n    }) => {\n      if (article.author === store.getState().user._id) store.dispatch({\n        type: ARTICLE_MY_SET_DELIVERED,\n        payload: {\n          article,\n          user: user\n        }\n      });else store.dispatch({\n        type: ARTICLE_TAKING_SET_DELIVERED,\n        payload: {\n          article,\n          user: user\n        }\n      });\n      store.dispatch({\n        type: GEOARTICLES_DELETE,\n        payload: {\n          articleId: article._id\n        }\n      });\n    });\n    socket.on(\"updateArticleReview\", ({\n      articleID,\n      articleStatus,\n      newReview,\n      isTaking\n    }) => {\n      if (isTaking) store.dispatch({\n        type: ARTICLE_TAKING_REVIEW_UPDATE,\n        payload: {\n          article: {\n            _id: articleID,\n            status: articleStatus\n          },\n          newReview\n        }\n      });else store.dispatch({\n        type: ARTICLE_MY_REVIEW_UPDATE,\n        payload: {\n          article: {\n            _id: articleID,\n            status: articleStatus\n          },\n          newReview\n        }\n      });\n      if (newReview.user._id === store.getState().user._id) store.dispatch({\n        type: REVIEWS_ME_UPDATE,\n        payload: {\n          review: newReview\n        }\n      });\n      if (newReview.author._id === store.getState().user._id) store.dispatch({\n        type: REVIEWS_MY_UPDATE,\n        payload: {\n          review: newReview\n        }\n      });\n    });\n    /*ARTICLES SOKETS*/\n\n    /*NOTIFICATIONS SOKETS*/\n\n    socket.on(\"sendNotification\", ({\n      notification,\n      isPushSong\n    }) => {\n      if (store.getState().notifications[notification.type].isGetted) {\n        store.dispatch({\n          type: dipathType(notification.type, \"add\"),\n          payload: notification\n        });\n      } else {\n        store.dispatch({\n          type: dipathType(notification.type, \"noread\"),\n          payload: store.getState().notifications[notification.type].noRead + 1\n        });\n\n        if (store.getState().notifications.all.isGetted) {\n          store.dispatch({\n            type: NOTIFICATIONS_ALL_ADD,\n            payload: notification\n          });\n        } else {\n          store.dispatch({\n            type: NOTIFICATIONS_ALL_SET_NO_READ,\n            payload: store.getState().notifications.all.noRead + 1\n          });\n          store.dispatch({\n            type: NOTIFICATIONS_NOREAD_ADD,\n            payload: notification\n          });\n        }\n      }\n\n      if (isPushSong) playBeep();\n    });\n    socket.on(\"readNotification\", ({\n      id,\n      type\n    }) => {\n      store.dispatch({\n        type: dipathType(type, \"read\"),\n        payload: id\n      });\n      store.dispatch({\n        type: NOTIFICATIONS_ALL_READ,\n        payload: id\n      });\n    });\n    socket.on(\"readNotificationAll\", ({}) => {\n      store.dispatch({\n        type: NOTIFICATIONS_READ_ALL\n      });\n    });\n  },\n  getSocketId: () => {\n    return socket.id;\n  },\n  typingDialog: (otherId, userId, isOrder) => {\n    socket.emit(\"typingDialog\", {\n      otherId,\n      userId,\n      isOrder\n    });\n  }\n};\n\nfunction dipathType(type, action) {\n  if (action === \"get\") switch (type) {\n    case \"offer\":\n      return NOTIFICATIONS_OFFERS_ADD;\n\n    case \"order\":\n      return NOTIFICATIONS_ORDERS_ADD;\n\n    case \"system\":\n      return NOTIFICATIONS_SYSTEM_ADD;\n\n    case \"tariff\":\n      return NOTIFICATIONS_TARRIFS_ADD;\n  }\n  if (action === \"read\") switch (type) {\n    case \"offer\":\n      return NOTIFICATIONS_OFFERS_READ;\n\n    case \"order\":\n      return NOTIFICATIONS_ORDERS_READ;\n\n    case \"system\":\n      return NOTIFICATIONS_SYSTEM_READ;\n\n    case \"tariff\":\n      return NOTIFICATIONS_TARRIFS_READ;\n  }\n  if (action === \"noread\") switch (type) {\n    case \"offer\":\n      return NOTIFICATIONS_OFFERS_SET_NO_READ;\n\n    case \"order\":\n      return NOTIFICATIONS_ORDERS_SET_NO_READ;\n\n    case \"system\":\n      return NOTIFICATIONS_SYSTEM_SET_NO_READ;\n\n    case \"tariff\":\n      return NOTIFICATIONS_TARRIFS_SET_NO_READ;\n  }\n}","map":{"version":3,"sources":["E:/SSR/controllers/SocketController.js"],"names":["io","store","api","DIALOGS_ADD_MESSAGE","DIALOGS_READ_MESSAGES","USER_SET_TARIFF","USER_UNSET_TARIFF","DIALOGS_SET_TYPER","DIALOGSORDER_SET_TYPER","DIALOGSORDER_ADD_MESSAGE","DIALOGSORDER_READ_MESSAGES","DIALOGSORDER_ADD","DIALOGS_ADD","ARTICLE_TAKING_DELETE_FROM_STATUS","ARTICLES_MY_CREATE","ARTICLES_MY_CREATE_COUNT","ARTICLES_MY_UPDATE","ARTICLE_TAKING_REVIEW_CREATE","ARTICLE_TAKING_REVIEW_UPDATE","ARTICLE_MY_REVIEW_CREATE","ARTICLE_MY_REVIEW_UPDATE","ARTICLES_TAKING_CREATE","ARTICLES_TAKING_CREATE_COUNT","ARTICLES_MY_DELETE_EXECUTOR","ARTICLES_MY_SET_EXECUTOR","ARTICLE_SET_ME_REQUEST","ARTICLE_UPDATE_ME_REQUEST","ARTICLE_REMOVE_ME_REQUEST","ARTICLES_TAKING_DELETE_EXECUTOR","ARTICLES_TAKING_SET_EXECUTOR","ARTICLE_MY_SET_DELIVERED","ARTICLE_TAKING_SET_DELIVERED","REVIEWS_ME_CREATE","REVIEWS_MY_CREATE","REVIEWS_ME_UPDATE","REVIEWS_MY_UPDATE","NOTIFICATIONS_ALL_SET_NO_READ","NOTIFICATIONS_OFFERS_ADD","NOTIFICATIONS_OFFERS_READ","NOTIFICATIONS_OFFERS_SET_NO_READ","NOTIFICATIONS_ORDERS_ADD","NOTIFICATIONS_ORDERS_READ","NOTIFICATIONS_ORDERS_SET_NO_READ","NOTIFICATIONS_SYSTEM_ADD","NOTIFICATIONS_SYSTEM_READ","NOTIFICATIONS_SYSTEM_SET_NO_READ","NOTIFICATIONS_TARRIFS_ADD","NOTIFICATIONS_TARRIFS_READ","NOTIFICATIONS_TARRIFS_SET_NO_READ","NOTIFICATIONS_ALL_READ","NOTIFICATIONS_ALL_ADD","NOTIFICATIONS_NOREAD_ADD","NOTIFICATIONS_READ_ALL","ARTICLE_MY_UPDATE_STATUS","ARTICLE_TAKING_UPDATE_STATUS","DIALOGSALL_ADD_MESSAGE","DIALOGSALL_ADD","GEOARTICLE_SET_LOCATION","GEOARTICLES_ADD","GEOARTICLES_DELETE","USER_SET_BAN","USER_SET_CANCEL_BAN","USER_SET_MODERATION_SUCCESS","USER_SET_MODERATION_FAIL","playNewMessage","playBeep","socket","init","apiToken","urlApi","transports","on","emit","userId","isOrder","orderId","getState","dialogs","dialogsOrder","find","x","user","_id","dispatch","type","payload","typing","setTimeout","dialogsUser","tariff","expiriesTariffAt","message","otherId","countNoread","isMy","isGetted","dialogsALL","dialogId","noReadCount","noRead","fetch","method","headers","Accept","Authorization","body","JSON","stringify","then","response","json","dialog","lastMessage","users","canLoad","messages","isAddCount","status","article","objStatus","myarticles","my","taking","lastStatus","articleID","articleId","isTaking","geoarticles","location","articleStatus","newReview","review","author","executor","executors","length","request","requestId","notification","isPushSong","notifications","dipathType","all","id","getSocketId","typingDialog","action"],"mappings":"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","sourcesContent":["import io from \"socket.io-client\";\r\nimport store from \"../redux/store\";\r\nimport api from \"../config/api\";\r\nimport {\r\n  DIALOGS_ADD_MESSAGE,\r\n  DIALOGS_READ_MESSAGES,\r\n  USER_SET_TARIFF,\r\n  USER_UNSET_TARIFF,\r\n  DIALOGS_SET_TYPER,\r\n  DIALOGSORDER_SET_TYPER,\r\n  DIALOGSORDER_ADD_MESSAGE,\r\n  DIALOGSORDER_READ_MESSAGES,\r\n  DIALOGSORDER_ADD,\r\n  DIALOGS_ADD,\r\n  ARTICLE_TAKING_DELETE_FROM_STATUS,\r\n  ARTICLES_MY_CREATE,\r\n  ARTICLES_MY_CREATE_COUNT,\r\n  ARTICLES_MY_UPDATE,\r\n  ARTICLE_TAKING_REVIEW_CREATE,\r\n  ARTICLE_TAKING_REVIEW_UPDATE,\r\n  ARTICLE_MY_REVIEW_CREATE,\r\n  ARTICLE_MY_REVIEW_UPDATE,\r\n  ARTICLES_TAKING_CREATE,\r\n  ARTICLES_TAKING_CREATE_COUNT,\r\n  ARTICLES_MY_DELETE_EXECUTOR,\r\n  ARTICLES_MY_SET_EXECUTOR,\r\n  ARTICLE_SET_ME_REQUEST,\r\n  ARTICLE_UPDATE_ME_REQUEST,\r\n  ARTICLE_REMOVE_ME_REQUEST,\r\n  ARTICLES_TAKING_DELETE_EXECUTOR,\r\n  ARTICLES_TAKING_SET_EXECUTOR,\r\n  ARTICLE_MY_SET_DELIVERED,\r\n  ARTICLE_TAKING_SET_DELIVERED,\r\n  REVIEWS_ME_CREATE,\r\n  REVIEWS_MY_CREATE,\r\n  REVIEWS_ME_UPDATE,\r\n  REVIEWS_MY_UPDATE,\r\n  //NOTIGICATION\r\n  NOTIFICATIONS_ALL_SET_NO_READ,\r\n  NOTIFICATIONS_OFFERS_ADD,\r\n  NOTIFICATIONS_OFFERS_READ,\r\n  NOTIFICATIONS_OFFERS_SET_NO_READ,\r\n  NOTIFICATIONS_ORDERS_ADD,\r\n  NOTIFICATIONS_ORDERS_READ,\r\n  NOTIFICATIONS_ORDERS_SET_NO_READ,\r\n  NOTIFICATIONS_SYSTEM_ADD,\r\n  NOTIFICATIONS_SYSTEM_READ,\r\n  NOTIFICATIONS_SYSTEM_SET_NO_READ,\r\n  NOTIFICATIONS_TARRIFS_ADD,\r\n  NOTIFICATIONS_TARRIFS_READ,\r\n  NOTIFICATIONS_TARRIFS_SET_NO_READ,\r\n  NOTIFICATIONS_ALL_READ,\r\n  NOTIFICATIONS_ALL_ADD,\r\n  NOTIFICATIONS_NOREAD_ADD,\r\n  NOTIFICATIONS_READ_ALL,\r\n  ARTICLE_MY_UPDATE_STATUS,\r\n  ARTICLE_TAKING_UPDATE_STATUS,\r\n  DIALOGSALL_ADD_MESSAGE,\r\n  DIALOGSALL_ADD,\r\n  GEOARTICLE_SET_LOCATION,\r\n  GEOARTICLES_ADD,\r\n  GEOARTICLES_DELETE,\r\n  USER_SET_BAN,\r\n  USER_SET_CANCEL_BAN,\r\n  USER_SET_MODERATION_SUCCESS,\r\n  USER_SET_MODERATION_FAIL,\r\n} from \"../redux/constants\";\r\nimport { playNewMessage, playBeep } from \"./SoundController\";\r\nlet socket = null;\r\n\r\nexport default {\r\n  init: (apiToken) => {\r\n    socket = io(api.urlApi, {\r\n      transports: [\"websocket\", \"polling\", \"flashsocket\"],\r\n    });\r\n    socket.on(\"connect\", () => {\r\n      socket.emit(\"auth\", apiToken);\r\n    });\r\n    //DIALOG\r\n    socket.on(\"typingDialog\", (userId, isOrder) => {\r\n      let orderId;\r\n      if (isOrder) {\r\n        if (\r\n          (orderId = store\r\n            .getState()\r\n            .dialogs.dialogsOrder.dialogs.find((x) => x.user._id === userId))\r\n        ) {\r\n          store.dispatch({\r\n            type: DIALOGSORDER_SET_TYPER,\r\n            payload: { orderId: orderId._id, typing: true },\r\n          });\r\n\r\n          setTimeout(() => {\r\n            store.dispatch({\r\n              type: DIALOGSORDER_SET_TYPER,\r\n              payload: { orderId: orderId._id, typing: false },\r\n            });\r\n          }, 2500);\r\n        }\r\n      } else {\r\n        if (\r\n          (orderId = store\r\n            .getState()\r\n            .dialogs.dialogsUser.dialogs.find((x) => x.user._id === userId))\r\n        ) {\r\n          store.dispatch({\r\n            type: DIALOGS_SET_TYPER,\r\n            payload: { orderId: orderId._id, typing: true },\r\n          });\r\n\r\n          setTimeout(() => {\r\n            store.dispatch({\r\n              type: DIALOGS_SET_TYPER,\r\n              payload: { orderId: orderId._id, typing: false },\r\n            });\r\n          }, 2500);\r\n        }\r\n      }\r\n    });\r\n    socket.on(\"setBan\", ({ tariff, expiriesTariffAt }) => {\r\n      store.dispatch({\r\n        type: USER_SET_BAN,\r\n      });\r\n    });\r\n    socket.on(\"cancelBan\", ({ tariff, expiriesTariffAt }) => {\r\n      store.dispatch({\r\n        type: USER_SET_CANCEL_BAN,\r\n        payload: { tariff, expiriesTariffAt },\r\n      });\r\n    });\r\n    socket.on(\"modarationSuccess\", ({}) => {\r\n      store.dispatch({\r\n        type: USER_SET_MODERATION_SUCCESS,\r\n        payload: {},\r\n      });\r\n    });\r\n    socket.on(\"modarationFail\", ({}) => {\r\n      store.dispatch({\r\n        type: USER_SET_MODERATION_FAIL,\r\n        payload: {},\r\n      });\r\n    });\r\n    socket.on(\"setTariff\", ({ tariff, expiriesTariffAt }) => {\r\n      if (store.getState().user.tariff) tariff = store.getState().user.tariff;\r\n      store.dispatch({\r\n        type: USER_SET_TARIFF,\r\n        payload: { tariff, expiriesTariffAt },\r\n      });\r\n    });\r\n    socket.on(\"dontTariff\", ({ tariff, expiriesTariffAt }) => {\r\n      store.dispatch({\r\n        type: USER_UNSET_TARIFF,\r\n      });\r\n    });\r\n\r\n    socket.on(\r\n      \"sendMessageDialog\",\r\n      ({ message, otherId, orderId, countNoread, isMy }) => {\r\n        let dialogs = orderId\r\n          ? store.getState().dialogs.dialogsOrder\r\n          : store.getState().dialogs.dialogsUser;\r\n        if (!dialogs.isGetted) dialogs = store.getState().dialogs.dialogsALL;\r\n        if (dialogs.dialogs.find((x) => x._id === message.dialogId)) {\r\n          store.dispatch({\r\n            type: orderId ? DIALOGSORDER_SET_TYPER : DIALOGS_SET_TYPER,\r\n            payload: { userId: message.user._id, typing: false },\r\n          });\r\n\r\n          let noReadCount = false;\r\n          if (!isMy && countNoread === 1) {\r\n            noReadCount = true;\r\n          }\r\n          store.dispatch({\r\n            type: orderId ? DIALOGSORDER_ADD_MESSAGE : DIALOGS_ADD_MESSAGE,\r\n            payload: {\r\n              message,\r\n              dialogId: message.dialogId,\r\n              noRead: message.user._id !== store.getState().user._id,\r\n              noReadCount,\r\n            },\r\n          });\r\n        } else {\r\n          fetch(`${api.urlApi}/api/user/get`, {\r\n            method: \"post\",\r\n            headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n              Authorization: `Bearer ${apiToken}`,\r\n            },\r\n            body: JSON.stringify({\r\n              userId: otherId,\r\n            }),\r\n          })\r\n            .then((response) => response.json())\r\n            .then(({ user }) => {\r\n              let dialog = {\r\n                lastMessage: message,\r\n                _id: message.dialogId,\r\n                users: [store.getState().user, user],\r\n                user: user,\r\n                orderId,\r\n                isGetted: false,\r\n                canLoad: true,\r\n                typing: false,\r\n                noRead: countNoread,\r\n                messages: [],\r\n              };\r\n              store.dispatch({\r\n                type: orderId ? DIALOGSORDER_ADD : DIALOGS_ADD,\r\n                payload: { dialog, isAddCount: !isMy && countNoread },\r\n              });\r\n\r\n              let noReadCount = false;\r\n              if (!isMy && countNoread === 1) {\r\n                noReadCount = true;\r\n              }\r\n\r\n              if (\r\n                store\r\n                  .getState()\r\n                  .dialogs.dialogsALL.dialogs.find(\r\n                    (x) => x._id === message.dialogId\r\n                  )\r\n              ) {\r\n                store.dispatch({\r\n                  type: DIALOGSALL_ADD_MESSAGE,\r\n                  payload: {\r\n                    message,\r\n                    dialogId: message.dialogId,\r\n                    noRead: message.user._id !== store.getState().user._id,\r\n                    noReadCount,\r\n                  },\r\n                });\r\n              } else\r\n                store.dispatch({\r\n                  type: DIALOGSALL_ADD,\r\n                  payload: { dialog, isAddCount: noReadCount },\r\n                });\r\n            });\r\n        }\r\n        playNewMessage();\r\n      }\r\n    );\r\n    socket.on(\"readMessagesDialog\", ({ dialogId, userId, isOrder }) => {\r\n      if (isOrder)\r\n        store.dispatch({\r\n          type: DIALOGSORDER_READ_MESSAGES,\r\n          payload: {\r\n            dialogId,\r\n            userId,\r\n            noRead: userId !== store.getState().user._id,\r\n            noReadCount: userId !== store.getState().user._id,\r\n          },\r\n        });\r\n      else\r\n        store.dispatch({\r\n          type: DIALOGS_READ_MESSAGES,\r\n          payload: {\r\n            dialogId,\r\n            userId,\r\n            noRead: userId !== store.getState().user._id,\r\n            noReadCount: userId !== store.getState().user._id,\r\n          },\r\n        });\r\n    });\r\n    /*DIALOG*/\r\n    /*ARTICLES SOKETS*/\r\n    socket.on(\"createMyArticle\", ({ status, article }) => {\r\n      let objStatus = store.getState().myarticles.my[status - 1];\r\n      if (objStatus.isGetted) {\r\n        store.dispatch({\r\n          type: ARTICLES_MY_CREATE,\r\n          payload: { status, article },\r\n        });\r\n      } else {\r\n        store.dispatch({\r\n          type: ARTICLES_MY_CREATE_COUNT,\r\n          payload: { status, article },\r\n        });\r\n      }\r\n    });\r\n    socket.on(\"createTakingArticle\", ({ status, article }) => {\r\n      let objStatus = store.getState().myarticles.taking[status - 2];\r\n      if (objStatus.isGetted) {\r\n        store.dispatch({\r\n          type: ARTICLES_TAKING_CREATE,\r\n          payload: { status, article },\r\n        });\r\n      } else {\r\n        store.dispatch({\r\n          type: ARTICLES_TAKING_CREATE_COUNT,\r\n          payload: { status, article },\r\n        });\r\n      }\r\n    });\r\n    socket.on(\"editMyArticle\", ({ status, article }) => {\r\n      store.dispatch({\r\n        type: ARTICLES_MY_UPDATE,\r\n        payload: { status: status, article },\r\n      });\r\n    });\r\n    socket.on(\"deleteTaking\", ({ lastStatus, articleID }) => {\r\n      store.dispatch({\r\n        type: ARTICLE_TAKING_DELETE_FROM_STATUS,\r\n        payload: { lastStatus, articleId: articleID },\r\n      });\r\n    });\r\n    socket.on(\"updateStatusMyArticle\", ({ lastStatus, article, isTaking }) => {\r\n      if (isTaking) {\r\n        store.dispatch({\r\n          type: ARTICLE_TAKING_UPDATE_STATUS,\r\n          payload: { lastStatus, article },\r\n        });\r\n      } else {\r\n        store.dispatch({\r\n          type: ARTICLE_MY_UPDATE_STATUS,\r\n          payload: { lastStatus, article },\r\n        });\r\n      }\r\n      //       GEOARTICLES_ADD\r\n      // GEOARTICLES_DELETE\r\n      if (store.getState().geoarticles.isGetted) {\r\n        if (lastStatus === 3 && article.status === 4)\r\n          store.dispatch({\r\n            type: GEOARTICLES_ADD,\r\n            payload: { article },\r\n          });\r\n        if (lastStatus === 4)\r\n          store.dispatch({\r\n            type: GEOARTICLES_DELETE,\r\n            payload: { articleId: article._id },\r\n          });\r\n      }\r\n    });\r\n    socket.on(\"setLocation\", ({ articleId, location }) => {\r\n      if (store.getState().geoarticles.isGetted)\r\n        store.dispatch({\r\n          type: GEOARTICLE_SET_LOCATION,\r\n          payload: { articleId, location },\r\n        });\r\n    });\r\n\r\n    socket.on(\r\n      \"createArticleReview\",\r\n      ({ articleID, articleStatus, newReview, isTaking }) => {\r\n        if (isTaking) {\r\n          store.dispatch({\r\n            type: ARTICLE_TAKING_REVIEW_CREATE,\r\n            payload: {\r\n              article: {\r\n                _id: articleID,\r\n                status: articleStatus,\r\n              },\r\n              newReview,\r\n            },\r\n          });\r\n        } else\r\n          store.dispatch({\r\n            type: ARTICLE_MY_REVIEW_CREATE,\r\n            payload: {\r\n              article: {\r\n                _id: articleID,\r\n                status: articleStatus,\r\n              },\r\n              newReview,\r\n            },\r\n          });\r\n        if (newReview.user._id === store.getState().user._id) {\r\n          store.dispatch({\r\n            type: REVIEWS_ME_CREATE,\r\n            payload: {\r\n              review: newReview,\r\n            },\r\n          });\r\n        }\r\n        if (newReview.author._id === store.getState().user._id) {\r\n          store.dispatch({\r\n            type: REVIEWS_MY_CREATE,\r\n            payload: {\r\n              review: newReview,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    );\r\n    socket.on(\r\n      \"deleteExecutor\",\r\n      ({ article, executor, lastStatus, isTaking }) => {\r\n        if (!isTaking) {\r\n          if (\r\n            !article.executors.length &&\r\n            article.status === 2 &&\r\n            lastStatus !== 2\r\n          ) {\r\n            store.dispatch({\r\n              type: ARTICLE_MY_UPDATE_STATUS,\r\n              payload: { lastStatus, article },\r\n            });\r\n          }\r\n          store.dispatch({\r\n            type: ARTICLES_MY_DELETE_EXECUTOR,\r\n            payload: { article, executor },\r\n          });\r\n        } else {\r\n          store.dispatch({\r\n            type: ARTICLES_TAKING_DELETE_EXECUTOR,\r\n            payload: { article, executor },\r\n          });\r\n        }\r\n      }\r\n    );\r\n    socket.on(\"setExecutor\", ({ article, executor, lastStatus, isTaking }) => {\r\n      if (!isTaking) {\r\n        if (article.type === \"order\") {\r\n          store.dispatch({\r\n            type: ARTICLE_MY_UPDATE_STATUS,\r\n            payload: { lastStatus, article },\r\n          });\r\n        }\r\n        store.dispatch({\r\n          type: ARTICLES_MY_SET_EXECUTOR,\r\n          payload: { article, executor },\r\n        });\r\n      } else\r\n        store.dispatch({\r\n          type: ARTICLES_TAKING_SET_EXECUTOR,\r\n          payload: { article, executor },\r\n        });\r\n    });\r\n    socket.on(\"createRequest\", ({ article, request }) => {\r\n      store.dispatch({\r\n        type: ARTICLE_SET_ME_REQUEST,\r\n        payload: { article, request },\r\n      });\r\n    });\r\n    socket.on(\"deleteRequest\", ({ article, requestId }) => {\r\n      store.dispatch({\r\n        type: ARTICLE_REMOVE_ME_REQUEST,\r\n        payload: { article, requestId },\r\n      });\r\n    });\r\n    socket.on(\"updateRequest\", ({ article, request }) => {\r\n      store.dispatch({\r\n        type: ARTICLE_UPDATE_ME_REQUEST,\r\n        payload: { article, request },\r\n      });\r\n    });\r\n    socket.on(\"setDelivered\", ({ article, user }) => {\r\n      if (article.author === store.getState().user._id)\r\n        store.dispatch({\r\n          type: ARTICLE_MY_SET_DELIVERED,\r\n          payload: { article, user: user },\r\n        });\r\n      else\r\n        store.dispatch({\r\n          type: ARTICLE_TAKING_SET_DELIVERED,\r\n          payload: { article, user: user },\r\n        });\r\n      store.dispatch({\r\n        type: GEOARTICLES_DELETE,\r\n        payload: { articleId: article._id },\r\n      });\r\n    });\r\n    socket.on(\r\n      \"updateArticleReview\",\r\n      ({ articleID, articleStatus, newReview, isTaking }) => {\r\n        if (isTaking)\r\n          store.dispatch({\r\n            type: ARTICLE_TAKING_REVIEW_UPDATE,\r\n            payload: {\r\n              article: {\r\n                _id: articleID,\r\n                status: articleStatus,\r\n              },\r\n              newReview,\r\n            },\r\n          });\r\n        else\r\n          store.dispatch({\r\n            type: ARTICLE_MY_REVIEW_UPDATE,\r\n            payload: {\r\n              article: {\r\n                _id: articleID,\r\n                status: articleStatus,\r\n              },\r\n              newReview,\r\n            },\r\n          });\r\n        if (newReview.user._id === store.getState().user._id)\r\n          store.dispatch({\r\n            type: REVIEWS_ME_UPDATE,\r\n            payload: {\r\n              review: newReview,\r\n            },\r\n          });\r\n\r\n        if (newReview.author._id === store.getState().user._id)\r\n          store.dispatch({\r\n            type: REVIEWS_MY_UPDATE,\r\n            payload: {\r\n              review: newReview,\r\n            },\r\n          });\r\n      }\r\n    );\r\n    /*ARTICLES SOKETS*/\r\n    /*NOTIFICATIONS SOKETS*/\r\n    socket.on(\"sendNotification\", ({ notification, isPushSong }) => {\r\n      if (store.getState().notifications[notification.type].isGetted) {\r\n        store.dispatch({\r\n          type: dipathType(notification.type, \"add\"),\r\n          payload: notification,\r\n        });\r\n      } else {\r\n        store.dispatch({\r\n          type: dipathType(notification.type, \"noread\"),\r\n          payload: store.getState().notifications[notification.type].noRead + 1,\r\n        });\r\n        if (store.getState().notifications.all.isGetted) {\r\n          store.dispatch({\r\n            type: NOTIFICATIONS_ALL_ADD,\r\n            payload: notification,\r\n          });\r\n        } else {\r\n          store.dispatch({\r\n            type: NOTIFICATIONS_ALL_SET_NO_READ,\r\n            payload: store.getState().notifications.all.noRead + 1,\r\n          });\r\n          store.dispatch({\r\n            type: NOTIFICATIONS_NOREAD_ADD,\r\n            payload: notification,\r\n          });\r\n        }\r\n      }\r\n      if (isPushSong) playBeep();\r\n    });\r\n\r\n    socket.on(\"readNotification\", ({ id, type }) => {\r\n      store.dispatch({\r\n        type: dipathType(type, \"read\"),\r\n        payload: id,\r\n      });\r\n      store.dispatch({\r\n        type: NOTIFICATIONS_ALL_READ,\r\n        payload: id,\r\n      });\r\n    });\r\n    socket.on(\"readNotificationAll\", ({}) => {\r\n      store.dispatch({\r\n        type: NOTIFICATIONS_READ_ALL,\r\n      });\r\n    });\r\n  },\r\n  getSocketId: () => {\r\n    return socket.id;\r\n  },\r\n  typingDialog: (otherId, userId, isOrder) => {\r\n    socket.emit(\"typingDialog\", { otherId, userId, isOrder });\r\n  },\r\n};\r\nfunction dipathType(type, action) {\r\n  if (action === \"get\")\r\n    switch (type) {\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_ADD;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_ADD;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_ADD;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_ADD;\r\n    }\r\n  if (action === \"read\")\r\n    switch (type) {\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_READ;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_READ;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_READ;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_READ;\r\n    }\r\n  if (action === \"noread\")\r\n    switch (type) {\r\n      case \"offer\":\r\n        return NOTIFICATIONS_OFFERS_SET_NO_READ;\r\n      case \"order\":\r\n        return NOTIFICATIONS_ORDERS_SET_NO_READ;\r\n      case \"system\":\r\n        return NOTIFICATIONS_SYSTEM_SET_NO_READ;\r\n      case \"tariff\":\r\n        return NOTIFICATIONS_TARRIFS_SET_NO_READ;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}