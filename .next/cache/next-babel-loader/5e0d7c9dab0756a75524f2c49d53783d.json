{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GEOARTICLE_SET_LOCATION } from \"../constants\";\nvar INITIAL_STATE = {\n  articles: [],\n  isGetted: false,\n  isFetching: true\n};\n\nvar geoarticle = function geoarticle() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : INITIAL_STATE;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case GEOARTICLE_SET_LOCATION:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          articles: state.articles.map(function (item) {\n            if (item._id === action.payload.articleId) return _objectSpread(_objectSpread({}, item), {}, {\n              lastCarrierLocation: action.payload.location\n            });else return item;\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default geoarticle;","map":{"version":3,"sources":["E:/SSR/redux/reducers/geoarticle.js"],"names":["GEOARTICLE_SET_LOCATION","INITIAL_STATE","articles","isGetted","isFetching","geoarticle","state","action","type","map","item","_id","payload","articleId","lastCarrierLocation","location"],"mappings":";;;;;;AAAA,SACEA,uBADF,QAEO,cAFP;AAIA,IAAMC,aAAa,GAAG;AACpBC,EAAAA,QAAQ,EAAE,EADU;AAEpBC,EAAAA,QAAQ,EAAE,KAFU;AAGpBC,EAAAA,UAAU,EAAE;AAHQ,CAAtB;;AAMA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAmC;AAAA,MAAlCC,KAAkC,uEAA1BL,aAA0B;AAAA,MAAXM,MAAW;;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,uBAAL;AAA8B;AAC5B,+CACKM,KADL;AAEEJ,UAAAA,QAAQ,EAAEI,KAAK,CAACJ,QAAN,CAAeO,GAAf,CAAmB,UAACC,IAAD,EAAU;AACrC,gBAAIA,IAAI,CAACC,GAAL,KAAaJ,MAAM,CAACK,OAAP,CAAeC,SAAhC,EACE,uCACKH,IADL;AAEEI,cAAAA,mBAAmB,EAAEP,MAAM,CAACK,OAAP,CAAeG;AAFtC,eADF,KAKK,OAAOL,IAAP;AACN,WAPS;AAFZ;AAWD;;AAED;AACE,aAAOJ,KAAP;AAhBJ;AAkBD,CAnBD;;AAqBA,eAAeD,UAAf","sourcesContent":["import {\r\n  GEOARTICLE_SET_LOCATION,\r\n} from \"../constants\";\r\n\r\nconst INITIAL_STATE = {\r\n  articles: [],\r\n  isGetted: false,\r\n  isFetching: true,\r\n};\r\n\r\nconst geoarticle = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case GEOARTICLE_SET_LOCATION: {\r\n      return {\r\n        ...state,\r\n        articles: state.articles.map((item) => {\r\n          if (item._id === action.payload.articleId)\r\n            return {\r\n              ...item,\r\n              lastCarrierLocation: action.payload.location,\r\n            };\r\n          else return item;\r\n        }),\r\n      };\r\n    }\r\n    \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default geoarticle;\r\n"]},"metadata":{},"sourceType":"module"}