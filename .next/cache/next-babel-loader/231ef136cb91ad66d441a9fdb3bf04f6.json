{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { NOTIFICATIONS_NOREAD_GET } from \"../constants\";\nimport settings from \"../../config/settings\";\nconst INITIAL_STATE = {\n  all: {\n    isFetching: true,\n    isGetted: false,\n    notifications: [],\n    noRead: 0,\n    onlyNoread: [],\n    canLoad: true\n  },\n  offer: {\n    isFetching: true,\n    isGetted: false,\n    notifications: [],\n    noRead: 0,\n    canLoad: true\n  },\n  order: {\n    isFetching: true,\n    isGetted: false,\n    notifications: [],\n    noRead: 0,\n    canLoad: true\n  },\n  system: {\n    isFetching: true,\n    isGetted: false,\n    notifications: [],\n    noRead: 0,\n    canLoad: true\n  },\n  tariff: {\n    isFetching: true,\n    isGetted: false,\n    notifications: [],\n    noRead: 0,\n    canLoad: true\n  }\n};\n\nconst notifications = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case NOTIFICATIONS_NOREAD_GET:\n      {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          all: _objectSpread(_objectSpread({}, state.all), {}, {\n            onlyNoread: action.payload\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default notifications;","map":{"version":3,"sources":["E:/SSR/redux/reducers/notification.js"],"names":["NOTIFICATIONS_NOREAD_GET","settings","INITIAL_STATE","all","isFetching","isGetted","notifications","noRead","onlyNoread","canLoad","offer","order","system","tariff","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,wBAAT,QAAyC,cAAzC;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE,IADT;AAEHC,IAAAA,QAAQ,EAAE,KAFP;AAGHC,IAAAA,aAAa,EAAE,EAHZ;AAIHC,IAAAA,MAAM,EAAE,CAJL;AAKHC,IAAAA,UAAU,EAAE,EALT;AAMHC,IAAAA,OAAO,EAAE;AANN,GADe;AASpBC,EAAAA,KAAK,EAAE;AACLN,IAAAA,UAAU,EAAE,IADP;AAELC,IAAAA,QAAQ,EAAE,KAFL;AAGLC,IAAAA,aAAa,EAAE,EAHV;AAILC,IAAAA,MAAM,EAAE,CAJH;AAKLE,IAAAA,OAAO,EAAE;AALJ,GATa;AAgBpBE,EAAAA,KAAK,EAAE;AACLP,IAAAA,UAAU,EAAE,IADP;AAELC,IAAAA,QAAQ,EAAE,KAFL;AAGLC,IAAAA,aAAa,EAAE,EAHV;AAILC,IAAAA,MAAM,EAAE,CAJH;AAKLE,IAAAA,OAAO,EAAE;AALJ,GAhBa;AAuBpBG,EAAAA,MAAM,EAAE;AACNR,IAAAA,UAAU,EAAE,IADN;AAENC,IAAAA,QAAQ,EAAE,KAFJ;AAGNC,IAAAA,aAAa,EAAE,EAHT;AAINC,IAAAA,MAAM,EAAE,CAJF;AAKNE,IAAAA,OAAO,EAAE;AALH,GAvBY;AA8BpBI,EAAAA,MAAM,EAAE;AACNT,IAAAA,UAAU,EAAE,IADN;AAENC,IAAAA,QAAQ,EAAE,KAFJ;AAGNC,IAAAA,aAAa,EAAE,EAHT;AAINC,IAAAA,MAAM,EAAE,CAJF;AAKNE,IAAAA,OAAO,EAAE;AALH;AA9BY,CAAtB;;AAuCA,MAAMH,aAAa,GAAG,CAACQ,KAAK,GAAGZ,aAAT,EAAwBa,MAAxB,KAAmC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKhB,wBAAL;AAA+B;AAC7B,+CACKc,KADL;AAEEX,UAAAA,GAAG,kCACEW,KAAK,CAACX,GADR;AAEDK,YAAAA,UAAU,EAAEO,MAAM,CAACE;AAFlB;AAFL;AAOD;;AAED;AACE,aAAOH,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeR,aAAf","sourcesContent":["import { NOTIFICATIONS_NOREAD_GET } from \"../constants\";\r\nimport settings from \"../../config/settings\";\r\nconst INITIAL_STATE = {\r\n  all: {\r\n    isFetching: true,\r\n    isGetted: false,\r\n    notifications: [],\r\n    noRead: 0,\r\n    onlyNoread: [],\r\n    canLoad: true,\r\n  },\r\n  offer: {\r\n    isFetching: true,\r\n    isGetted: false,\r\n    notifications: [],\r\n    noRead: 0,\r\n    canLoad: true,\r\n  },\r\n  order: {\r\n    isFetching: true,\r\n    isGetted: false,\r\n    notifications: [],\r\n    noRead: 0,\r\n    canLoad: true,\r\n  },\r\n  system: {\r\n    isFetching: true,\r\n    isGetted: false,\r\n    notifications: [],\r\n    noRead: 0,\r\n    canLoad: true,\r\n  },\r\n  tariff: {\r\n    isFetching: true,\r\n    isGetted: false,\r\n    notifications: [],\r\n    noRead: 0,\r\n    canLoad: true,\r\n  },\r\n};\r\n\r\nconst notifications = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case NOTIFICATIONS_NOREAD_GET: {\r\n      return {\r\n        ...state,\r\n        all: {\r\n          ...state.all,\r\n          onlyNoread: action.payload,\r\n        },\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default notifications;\r\n"]},"metadata":{},"sourceType":"module"}